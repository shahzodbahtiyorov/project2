import datetimeimport refrom datetime import timezonefrom compat import JsonResponsefrom django.utils import timezonefrom v1.models import IPBlackList, Devicefrom django.utils.timezone import utcfrom v1.models import IPAddress, IPMiddlewarefrom django.http import HttpResponseForbiddenfrom django.utils.deprecation import MiddlewareMixinclass RequestLimitMiddleware:    def __init__(self, get_response):        self.get_response = get_response    def __call__(self, request):        if request.path[:4] == "/api":            x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')            if x_forwarded_for:                ip_address = x_forwarded_for.split(',')[0]            else:                ip_address = request.META.get('REMOTE_ADDR')            print(ip_address)            ip_in_black_list = IPBlackList.objects.filter(ip_address=ip_address).first()            if ip_in_black_list:                if ip_in_black_list.is_blocked:                    return HttpResponseForbidden(f"Request limit exceeded,\n {ip_in_black_list.left_time} sec")            # body = ujson.loads(request.body)            middleware = IPMiddleware.objects.first()            if not middleware:                middleware = IPMiddleware.objects.create()            time_threshold = timezone.now() - timezone.timedelta(hours=middleware.requests_time)            request_count = IPAddress.objects.filter(ip_address=ip_address, timestamp__gte=time_threshold).count()            if request_count >= middleware.requests_count:                IPBlackList.objects.update_or_create(ip_address=ip_address, defaults={                    "blocked_at": datetime.datetime.utcnow().replace(tzinfo=utc)}                                                     )                IPAddress.objects.filter(ip_address=ip_address).delete()                return HttpResponseForbidden("Request limit exceeded")            IPAddress.objects.create(ip_address=ip_address)        response = self.get_response(request)        return response