from django.db import modelsfrom uuid import uuid4from v1.models import UsersREAD_CHOICES = (    (0, "unread"),    (1, "client read"),    (2, "client answered"),    (3, "admin answered"),    (4, "admin read"),)def upload_location(instance, filename):    ext = filename.split('.')[-1]    if ext.lower() in ['doc', 'png', 'pdf', 'xml', 'jpeg', 'mp4', 'jpg', 'mov', 'm4v']:        file_path = 'single_news/{title}'.format(title='{}.{}'.format(uuid4().hex, ext))        return file_path    else:        raise Exceptionclass SingleNewsModel(models.Model):    user = models.ForeignKey(Users, related_name="answered_single_news", on_delete=models.DO_NOTHING, null=True,                             blank=True)    client = models.ForeignKey(Users, related_name="received_singe_news", on_delete=models.DO_NOTHING, )    question = models.TextField(null=True, blank=True)    answer = models.TextField(null=True, blank=True)    image = models.ImageField(upload_to=upload_location, null=True, blank=True)    read = models.IntegerField(choices=READ_CHOICES, default=0)    created_at = models.DateTimeField(auto_now_add=True)    updated_at = models.DateTimeField(auto_now=True, null=True, blank=True)    def __str__(self):        return f"{self.client_id}"    def collection(self):        if self.client and self.user:            return {                "id": self.id,                "user": self.user.id,                "client": self.client.id,                "image": "media/"+str(self.image.url),                "question": self.question,                "answer": self.answer,                "read": self.read,                'created_at': self.created_at.strftime("%Y %d, %b %H:%M:%S"),                'updated_at': self.updated_at.strftime("%Y %d, %b %H:%M:%S"),            }        elif self.client:            return {                "id": self.id,                # "user": self.user,                "client": self.client.id,                "image": "media/"+str(self.image),                "question": self.question,                "answer": self.answer,                "read": self.read,                'created_at': self.created_at.strftime("%Y %d, %b %H:%M:%S"),                'updated_at': self.updated_at.strftime("%Y %d, %b %H:%M:%S"),            }        else:            return {                "id": self.id,                "user": self.user.id,                # "client": self.client.id,                "image": "media/"+str(self.image),                "question": self.question,                "answer": self.answer,                "read": self.read,                'created_at': self.created_at.strftime("%Y %d, %b %H:%M:%S"),                'updated_at': self.updated_at.strftime("%Y %d, %b %H:%M:%S"),            }    class Meta:        ordering = ["-created_at"]